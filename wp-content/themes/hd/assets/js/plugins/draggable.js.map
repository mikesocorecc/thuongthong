{"version":3,"file":"/js/plugins/draggable.js","mappings":";6HAGA,sDAAgCA,SAASC,iBAAiB,+lBACtCC,SAAQ,SAACC,EAAIC,GAC7B,IAAMC,ECcG,EAACC,EAAO,KACnBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,CAACC,EAAIC,IAGrDD,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,MAGP,ID3BaG,CAAO,GACrBZ,EAAGa,UAAUC,IAAI,aAAeZ,GAChC,IAAoBa,EAAUC,EAAUC,EAAUC,EAA9CC,GAAS,EAA+CC,EAAU,EAAGC,EAAU,EAKnF,SAASC,EAAUC,GACA,eAAXA,EAAEC,MACFP,EAAWM,EAAEE,QAAQ,GAAGC,QAAUN,EAASF,EAAWK,EAAEE,QAAQ,GAAGE,QAAUN,IAE7EJ,EAAWM,EAAEG,QAAUN,EAASF,EAAWK,EAAEI,QAAUN,GAE3DF,GAAS,CACZ,CACD,SAASS,EAAQL,GACbN,EAAWF,EAAUG,EAAWF,EAChCG,GAAS,CACZ,CACD,SAASU,EAAKN,GACNJ,IACAI,EAAEO,iBACa,cAAXP,EAAEC,MACFT,EAAWQ,EAAEE,QAAQ,GAAGC,QAAUT,EAAUD,EAAWO,EAAEE,QAAQ,GAAGE,QAAUT,IAE9EH,EAAWQ,EAAEG,QAAUT,EAAUD,EAAWO,EAAEI,QAAUT,GAE5DE,EAAUL,EACVM,EAAUL,EACVhB,EAAG+B,MAAMC,UAAY,eAAiBjB,EAAW,OAASC,EAAW,SAE5E,CA5BDhB,EAAGiC,iBAAiB,aAAcX,GAAW,GAC7CtB,EAAGiC,iBAAiB,WAAYL,GAAS,GACzC5B,EAAGiC,iBAAiB,YAAaJ,GAAM,GAAQ7B,EAAGiC,iBAAiB,YAAaX,GAAW,GAC3FtB,EAAGiC,iBAAiB,UAAWL,GAAS,GAAQ5B,EAAGiC,iBAAiB,YAAaJ,GAAM,EA0B1F","sources":["webpack://webhd/./resources/js/draggable.js","webpack://webhd/./node_modules/nanoid/index.browser.js"],"sourcesContent":["/*! draggable - https://www.kirupa.com/html5/drag.htm */\r\nimport {nanoid} from \"nanoid\";\r\n\r\nconst draggable_container = [...document.querySelectorAll(\".draggable, #arcontactus\")];\r\ndraggable_container.forEach((el, index) => {\r\n    const _rand = nanoid(6);\r\n    el.classList.add('draggable-' + _rand);\r\n    var active = false, currentX, currentY, initialX, initialY, xOffset = 0, yOffset = 0;\r\n    el.addEventListener(\"touchstart\", dragStart, false);\r\n    el.addEventListener(\"touchend\", dragEnd, false);\r\n    el.addEventListener(\"touchmove\", drag, false); el.addEventListener(\"mousedown\", dragStart, false);\r\n    el.addEventListener(\"mouseup\", dragEnd, false); el.addEventListener(\"mousemove\", drag, false);\r\n    function dragStart(e) {\r\n        if (e.type === \"touchstart\") {\r\n            initialX = e.touches[0].clientX - xOffset; initialY = e.touches[0].clientY - yOffset;\r\n        } else {\r\n            initialX = e.clientX - xOffset; initialY = e.clientY - yOffset;\r\n        }\r\n        active = true;\r\n    }\r\n    function dragEnd(e) {\r\n        initialX = currentX; initialY = currentY;\r\n        active = false;\r\n    }\r\n    function drag(e) {\r\n        if (active) {\r\n            e.preventDefault();\r\n            if (e.type === \"touchmove\") {\r\n                currentX = e.touches[0].clientX - initialX; currentY = e.touches[0].clientY - initialY;\r\n            } else {\r\n                currentX = e.clientX - initialX; currentY = e.clientY - initialY;\r\n            }\r\n            xOffset = currentX;\r\n            yOffset = currentY;\r\n            el.style.transform = \"translate3d(\" + currentX + \"px, \" + currentY + \"px, 0)\";\r\n        }\r\n    }\r\n});","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["document","querySelectorAll","forEach","el","index","_rand","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","nanoid","classList","add","currentX","currentY","initialX","initialY","active","xOffset","yOffset","dragStart","e","type","touches","clientX","clientY","dragEnd","drag","preventDefault","style","transform","addEventListener"],"sourceRoot":""}